{"version":3,"sources":["ApiContents.js","Navigator2.js","App.js","serviceWorker.js","index.js"],"names":["ApiContents","prevProps","link","this","props","SwaggerUI","domNode","docRef","url","plugins","statePlugins","spec","wrapSelectors","allowTryItOutFor","_this","react_default","a","createElement","className","ref","Component","Navigator","state","navigator","activeApp","activeVersion","activeService","componentWillMount","getNavigatorConfig","componentDidUpdate","fetch","then","response","json","setState","serviceClicked","app","version","service","name","onChange","jsonUrl","renderVersions","versions","map","j","key","concat","renderServices","_this$state","services","k","onClick","_this2","_this$state2","apps","i","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","src","alt","Navigator2","src_ApiContents_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4c868c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport SwaggerUI from 'swagger-ui';\nimport \"../node_modules/swagger-ui/dist/swagger-ui.css\";\nimport \"./ApiContents.css\";\n\nclass ApiContents extends Component {\n  docRef;\n\n  componentDidUpdate(prevProps) {\n    const { link } = this.props;\n\n    if (prevProps.link === link) {\n      return;\n    }\n\n    SwaggerUI({\n      domNode: this.docRef,\n      url: link,\n      plugins: [\n        () => ({\n          statePlugins: {\n            spec: {\n              wrapSelectors: {\n                allowTryItOutFor: () => () => false\n              }\n            }\n          }\n        })\n      ]\n    });\n  }\n\n  render() {\n    const { link } = this.props;\n\n    return (\n      <div className=\"contents\">\n        {link && <div ref={(ref) => { this.docRef = ref; }} />}\n      </div>\n    );\n  }\n}\n\nexport default ApiContents;\n","import React, { Component } from \"react\";\r\nimport \"./Navigator.css\";\r\n\r\nclass Navigator extends Component {\r\n  state = {\r\n    navigator: null,\r\n    activeApp: null,\r\n    activeVersion: null,\r\n    activeService: null\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    this.getNavigatorConfig();\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n  }\r\n\r\n  getNavigatorConfig = () => {\r\n    fetch(\"docs/navigator.json\")\r\n      .then(response => response.json())\r\n      .then(navigator => this.setState({ navigator: navigator }));\r\n  }\r\n\r\n  serviceClicked = (app, version, service) => {\r\n    this.setState({ activeApp: app.name, activeVersion: version.name, activeService: service.name}, () => this.props.onChange(service.jsonUrl));\r\n  }\r\n\r\n  render() {\r\n    const { navigator, activeApp } = this.state;\r\n    if (!navigator)\r\n      return null;\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          navigator.apps.map((app, i) =>\r\n            <div key={`a${i}`} className=\"app\">\r\n              <div\r\n                className={\"app-title\" + (app.name === activeApp ? \" selected\" : \"\")}\r\n              >\r\n                {app.name}\r\n              </div>\r\n              <div className=\"app-children\">\r\n                {this.renderVersions(app)}\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderVersions = app => {\r\n    const { activeVersion } = this.state;\r\n\r\n    return app.versions.map((version, j) => {\r\n      return (\r\n        <div key={`v${j}`} className=\"version\">\r\n          <div\r\n            className={\"version-title\" + (version.name === activeVersion ? \" selected\" : \"\")}\r\n          >\r\n            {version.name}\r\n          </div>\r\n          <div className=\"version-children\">\r\n            {this.renderServices(app, version)}\r\n          </div>\r\n        </div>\r\n      )\r\n    });\r\n  }\r\n\r\n  renderServices = (app, version) => {\r\n    const { activeVersion, activeService } = this.state;\r\n\r\n    return version.services.map((service, k) => {\r\n      return (\r\n        <div\r\n          key={`s${k}`}\r\n          className={\"service\" + (version.name === activeVersion && service.name === activeService ? \" selected\" : \"\")}\r\n          onClick={() => this.serviceClicked(app, version, service)}>\r\n          {service.name}\r\n        </div>);\r\n    })\r\n  }\r\n}\r\n\r\nexport default Navigator;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ApiContents from \"./ApiContents\";\nimport Navigator2 from \"./Navigator2\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      link: \"\"\n    };\n  }\n\n  onChange = jsonUrl => this.setState({ link: jsonUrl });\n\n  render() {\n    const { link } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <img className=\"logo\" src=\"images/tieto-logo.png\" alt=\"\" />\n          <p className=\"pagetitle\">CSS - Collections</p>\n          <img src=\"images/collections.jpeg\"  alt=\"\" />\n        </div>\n        <div className=\"content\">\n          <div className=\"navbar\">\n            <Navigator2 onChange={this.onChange} />\n          </div>\n          <div className=\"apicontents\">\n            <ApiContents link={link} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}